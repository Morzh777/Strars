import { PrismaClient } from './src/generated/prisma/index.js';

const prisma = new PrismaClient();

// –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
const names = [
  '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–î–º–∏—Ç—Ä–∏–π', '–ú–∞–∫—Å–∏–º', '–°–µ—Ä–≥–µ–π', '–ê–Ω–¥—Ä–µ–π', '–ê–ª–µ–∫—Å–µ–π', '–ê—Ä—Ç—ë–º', '–ò–ª—å—è', '–ö–∏—Ä–∏–ª–ª', '–ú–∏—Ö–∞–∏–ª',
  '–ê–Ω–Ω–∞', '–ú–∞—Ä–∏—è', '–ï–ª–µ–Ω–∞', '–û–ª—å–≥–∞', '–¢–∞—Ç—å—è–Ω–∞', '–ù–∞—Ç–∞–ª—å—è', '–ò—Ä–∏–Ω–∞', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–°–≤–µ—Ç–ª–∞–Ω–∞', '–Æ–ª–∏—è'
];

const surnames = [
  '–ò–≤–∞–Ω–æ–≤', '–°–º–∏—Ä–Ω–æ–≤', '–ö—É–∑–Ω–µ—Ü–æ–≤', '–ü–æ–ø–æ–≤', '–í–∞—Å–∏–ª—å–µ–≤', '–ü–µ—Ç—Ä–æ–≤', '–°–æ–∫–æ–ª–æ–≤', '–ú–∏—Ö–∞–π–ª–æ–≤', '–ù–æ–≤–∏–∫–æ–≤', '–§—ë–¥–æ—Ä–æ–≤',
  '–ú–æ—Ä–æ–∑–æ–≤', '–í–æ–ª–∫–æ–≤', '–ê–ª–µ–∫—Å–µ–µ–≤', '–õ–µ–±–µ–¥–µ–≤', '–°–µ–º—ë–Ω–æ–≤', '–ï–≥–æ—Ä–æ–≤', '–ü–∞–≤–ª–æ–≤', '–ö–æ–∑–ª–æ–≤', '–°—Ç–µ–ø–∞–Ω–æ–≤', '–ù–∏–∫–æ–ª–∞–µ–≤'
];

const companies = [
  '–Ø–Ω–¥–µ–∫—Å', '–°–±–µ—Ä', '–¢–∏–Ω—å–∫–æ—Ñ—Ñ', 'VK', 'Ozon', 'Wildberries', '–ê–≤–∏—Ç–æ', '–ú–¢–°', '–ú–µ–≥–∞—Ñ–æ–Ω', '–†–æ—Å—Ç–µ–ª–µ–∫–æ–º',
  '–ü–ò–ö', '–ì–∞–∑–ø—Ä–æ–º', '–†–æ—Å–Ω–µ—Ñ—Ç—å', '–õ—É–∫–æ–π–ª', '–ú–∞–≥–Ω–∏—Ç', 'X5 Group', '–ù–æ—Ä–Ω–∏–∫–µ–ª—å', 'Severstal', 'NLMK', 'Evraz'
];

const positions = [
  'Frontend Developer', 'Backend Developer', 'Full Stack Developer', 'DevOps Engineer', 'Data Scientist',
  'Product Manager', 'UX/UI Designer', 'QA Engineer', 'Team Lead', 'CTO', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', '–ê–Ω–∞–ª–∏—Ç–∏–∫',
  '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–ò–Ω–∂–µ–Ω–µ—Ä', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–î–∏—Ä–µ–∫—Ç–æ—Ä', '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', '–≠–∫—Å–ø–µ—Ä—Ç', '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä'
];

const technologies = [
  'React', 'Vue', 'Angular', 'Node.js', 'Python', 'Java', 'Go', 'Rust', 'TypeScript', 'JavaScript',
  'Docker', 'Kubernetes', 'AWS', 'PostgreSQL', 'MongoDB', 'Redis', 'GraphQL', 'REST API', 'Microservices', 'DevOps'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
const randomChoice = (arr) => arr[Math.floor(Math.random() * arr.length)];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
const randomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const generateUser = (index) => {
  const name = randomChoice(names);
  const surname = randomChoice(surnames);
  const fullName = `${name} ${surname}`;
  const username = `${name.toLowerCase()}_${surname.toLowerCase()}_${index}`;
  const email = `${username}@example.com`;
  
  const company = randomChoice(companies);
  const position = randomChoice(positions);
  const tech1 = randomChoice(technologies);
  const tech2 = randomChoice(technologies);
  const tech3 = randomChoice(technologies);
  
  // –ê–≤–∞—Ç–∞—Ä –æ—Ç 1 –¥–æ 10
  const avatarNumber = randomInt(1, 10);
  const avatar = `https://www.heroui.com/avatars/avatar-${avatarNumber}.png`;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º starsCount —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º (–±–æ–ª—å—à–µ –ª—é–¥–µ–π —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
  let starsCount;
  const rand = Math.random();
  if (rand < 0.1) {
    // 10% - —Ç–æ–ø –∏–≥—Ä–æ–∫–∏ (4000-5000 –∑–≤–µ–∑–¥)
    starsCount = randomInt(4000, 5000);
  } else if (rand < 0.3) {
    // 20% - —Ö–æ—Ä–æ—à–∏–µ –∏–≥—Ä–æ–∫–∏ (2500-3999 –∑–≤–µ–∑–¥)
    starsCount = randomInt(2500, 3999);
  } else if (rand < 0.7) {
    // 40% - —Å—Ä–µ–¥–Ω–∏–µ –∏–≥—Ä–æ–∫–∏ (1000-2499 –∑–≤–µ–∑–¥)
    starsCount = randomInt(1000, 2499);
  } else {
    // 30% - –Ω–æ–≤–∏—á–∫–∏ (0-999 –∑–≤–µ–∑–¥)
    starsCount = randomInt(0, 999);
  }
  
  const maxStars = 5000;
  const description = `${position} –≤ ${company}. ${randomChoice([
    '–°–æ–∑–¥–∞—é –∫—Ä—É—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã!',
    '–õ—é–±–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å!',
    '–†–µ—à–∞—é —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏!',
    '–î–µ–ª–∞—é –º–∏—Ä –ª—É—á—à–µ —á–µ—Ä–µ–∑ –∫–æ–¥!',
    '–≠–∫—Å–ø–µ—Ä—Ç –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏!',
    '–°—Ç—Ä–æ—é –±—É–¥—É—â–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π!'
  ])} üöÄ`;
  
  const tags = `#${tech1} #${tech2} #${tech3} ‚≠ê`;
  
  return {
    email,
    name: fullName,
    image: avatar,
    password: '$2a$10$defaulthashedpassword', // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–∞—Ä–æ–ª—è
    description,
    tags,
    starsCount,
    maxStars,
    isActive: Math.random() > 0.05, // 95% –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    createdAt: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000), // –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
  };
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function seedMillionUsers() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 1,000,000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');
  
  const BATCH_SIZE = 1000; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 1000 –∑–∞ —Ä–∞–∑
  const TOTAL_USERS = 1000000;
  const TOTAL_BATCHES = Math.ceil(TOTAL_USERS / BATCH_SIZE);
  
  let addedUsers = 0;
  const startTime = Date.now();
  
  try {
    for (let batch = 0; batch < TOTAL_BATCHES; batch++) {
      const batchStartTime = Date.now();
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = [];
      const currentBatchSize = Math.min(BATCH_SIZE, TOTAL_USERS - addedUsers);
      
      for (let i = 0; i < currentBatchSize; i++) {
        users.push(generateUser(addedUsers + i + 1));
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
      await prisma.user.createMany({
        data: users,
        skipDuplicates: true,
      });
      
      addedUsers += currentBatchSize;
      const batchTime = Date.now() - batchStartTime;
      const avgTimePerUser = batchTime / currentBatchSize;
      const totalElapsed = (Date.now() - startTime) / 1000;
      const estimatedTotal = (totalElapsed / addedUsers) * TOTAL_USERS;
      const remaining = estimatedTotal - totalElapsed;
      
      // –ü—Ä–æ–≥—Ä–µ—Å—Å
      const progress = ((addedUsers / TOTAL_USERS) * 100).toFixed(1);
      console.log(`üìä Batch ${batch + 1}/${TOTAL_BATCHES} –∑–∞–≤–µ—Ä—à–µ–Ω`);
      console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${addedUsers.toLocaleString()} / ${TOTAL_USERS.toLocaleString()} (${progress}%)`);
      console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è batch: ${batchTime}ms (${avgTimePerUser.toFixed(2)}ms/user)`);
      console.log(`   üïê –û—Å—Ç–∞–ª–æ—Å—å: ~${Math.round(remaining)}s`);
      console.log('');
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å –ë–î
      if (batch % 10 === 0) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }
    
    const totalTime = (Date.now() - startTime) / 1000;
    console.log(`üéâ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${addedUsers.toLocaleString()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!`);
    console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.round(totalTime)}s`);
    console.log(`üìà –°–∫–æ—Ä–æ—Å—Ç—å: ${Math.round(addedUsers / totalTime)} users/sec`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ starsCount:');
    const stats = await prisma.user.aggregate({
      _count: { id: true },
      _avg: { starsCount: true },
      _max: { starsCount: true },
      _min: { starsCount: true },
    });
    
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats._count.id.toLocaleString()}`);
    console.log(`   –°—Ä–µ–¥–Ω–∏–µ –∑–≤–µ–∑–¥—ã: ${Math.round(stats._avg.starsCount)}`);
    console.log(`   –ú–∞–∫—Å–∏–º—É–º –∑–≤–µ–∑–¥: ${stats._max.starsCount}`);
    console.log(`   –ú–∏–Ω–∏–º—É–º –∑–≤–µ–∑–¥: ${stats._min.starsCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
console.log('üéØ –°–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∏–ª–ª–∏–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
console.log('üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä—ã: https://www.heroui.com/avatars/avatar-1.png –¥–æ avatar-10.png');
console.log('‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n');

seedMillionUsers().catch(console.error);
