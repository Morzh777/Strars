
import prisma from "@/utils/prisma";

export interface LoginUserCard {
  name: string;
  username: string;
  avatar: string;
  description: string;
  tags: string;
  starsCount: number;
  maxStars: number;
  globalRank: number;
}

// –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const mockLoginUserCards: LoginUserCard[] = [
  {
    name: "–ù–∞—Ç–∞—à–∞ –†–∞—á–µ–≤–∞",
    username: "natasha_racheva",
    avatar: "https://heroui.com/avatars/avatar-1.png",
    description: "–ì–ª–∞–≤–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ü–ò–ö —Ä–µ–Ω–æ–≤–∞—Ü–∏—è. –£–ª—É—á—à–∞—é –≥–æ—Ä–æ–¥—Å–∫—É—é —Å—Ä–µ–¥—É! üèóÔ∏è",
    tags: "#–ü–ò–ö #–†–µ–Ω–æ–≤–∞—Ü–∏—è #–ò–Ω–∂–µ–Ω–µ—Ä ‚≠ê",
    starsCount: 1500,
    maxStars: 5000,
    globalRank: 12,
  },
  {
    name: "–ê–ª–µ–∫—Å–µ–π –ú–æ—Ä–æ–∑–æ–≤",
    username: "alex_morozov",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e29026024d",
    description: "Senior Frontend Developer –≤ –Ø–Ω–¥–µ–∫—Å–µ. –°–æ–∑–¥–∞—é –∫—Ä—É—Ç—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã! üíª",
    tags: "#Frontend #React #TypeScript ‚ö°",
    starsCount: 2800,
    maxStars: 5000,
    globalRank: 5,
  },
  {
    name: "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
    username: "maria_petrova",
    avatar: "https://heroui.com/avatars/avatar-3.png",
    description: "UX/UI Designer –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ. –î–µ–ª–∞—é –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–æ–±–Ω—ã–º–∏ –∏ –∫—Ä–∞—Å–∏–≤—ã–º–∏! üé®",
    tags: "#Design #UX #Figma üéØ",
    starsCount: 2200,
    maxStars: 5000,
    globalRank: 8,
  },
];

// –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const getLoginUserCards = async (): Promise<LoginUserCard[]> => 
  process.env.NODE_ENV === "development" ? mockLoginUserCards : 
  await prisma.user.findMany({ 
      take: 3, 
      orderBy: { createdAt: 'desc' }, 
      select: { 
        name: true, 
        email: true, 
        image: true, 
        description: true, 
        tags: true, 
        starsCount: true, 
        maxStars: true, 
        globalRank: true 
      } 
    })
    .then(users => users.map((user, index) => ({
      name: user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      username: user.email?.split('@')[0] || 'user',
      avatar: user.image || `https://ui-avatars.com/api/?name=${encodeURIComponent(user.name || 'User')}&background=3b82f6&color=fff`,
      description: user.description || "–£—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ STARS",
      tags: user.tags || "#STARS #–£—á–∞—Å—Ç–Ω–∏–∫ ‚≠ê",
      starsCount: user.starsCount || Math.floor(Math.random() * 3000) + 1000,
      maxStars: user.maxStars || 5000,
      globalRank: user.globalRank || index + 1,
    })))
    .catch(() => mockLoginUserCards);

export async function GET() {
  try {
    const cards = await getLoginUserCards();
    return Response.json(cards);
  } catch (error) {
    console.error("‚ùå API Error:", error);
    return Response.json(mockLoginUserCards);
  }
}