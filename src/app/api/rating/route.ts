import { NextResponse } from 'next/server';

import { PrismaClient } from '@/generated/prisma';
import { auth } from '@/lib/auth';

const prisma = new PrismaClient();

export async function GET() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const session = await auth();
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const userId = session.user.id;

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–µ–π
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: {
        id: true,
        name: true,
        starsCount: true,
        globalRank: true,
        createdAt: true,
        image: true,
        isActive: true,
        sessions: {
          orderBy: { expires: 'desc' },
          take: 1,
          select: { expires: true }
        },
        updatedAt: true
      }
    });

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–Ω–≥–∞
    const totalUsers = await prisma.user.count();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–≤–µ–∑–¥ (–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–Ω–≥–∞)
    const usersWithMoreStars = await prisma.user.count({
      where: {
        starsCount: {
          gt: user.starsCount || 0
        }
      }
    });

    const currentRank = usersWithMoreStars + 1;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–µ–≥–æ–¥–Ω—è
    const lastSession = user.sessions[0];
    const isActiveToday = lastSession && lastSession.expires > today;
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ updatedAt (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—è–ª –ø—Ä–æ—Ñ–∏–ª—å)
    const userUpdatedToday = user.updatedAt && user.updatedAt > today;
    const isUserActive = isActiveToday || userUpdatedToday;

    // –†–µ–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–≤–µ–∑–¥ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const dailyActivity = isUserActive ? Math.min(10, Math.floor((user.starsCount || 0) / 100) + 1) : 0;
    const weeklyActivity = dailyActivity * 7;
    const monthlyActivity = dailyActivity * 30;
    const totalActivity = user.starsCount || 0;

    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    const achievements = [
      { 
        id: "first-steps", 
        name: "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", 
        description: "–ü–æ–ª—É—á–∏–ª –ø–µ—Ä–≤—ã–µ 100 –∑–≤–µ–∑–¥", 
        icon: "üåü",
        earned: (user.starsCount || 0) >= 100,
        earnedAt: (user.starsCount || 0) >= 100 ? user.createdAt.toISOString() : undefined,
        reward: 50
      },
      { 
        id: "active-user", 
        name: "–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 
        description: "7 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ä—è–¥", 
        icon: "üî•",
        earned: dailyActivity >= 5,
        reward: 100
      },
      { 
        id: "star-hunter", 
        name: "–ó–≤–µ–∑–¥–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫", 
        description: "–°–æ–±—Ä–∞–ª 1000 –∑–≤–µ–∑–¥", 
        icon: "‚≠ê",
        earned: (user.starsCount || 0) >= 1000,
        earnedAt: (user.starsCount || 0) >= 1000 ? user.createdAt.toISOString() : undefined,
        reward: 200
      },
      { 
        id: "master-activity", 
        name: "–ú–∞—Å—Ç–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", 
        description: "30 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ä—è–¥", 
        icon: "üèÜ",
        earned: false,
        progress: Math.min(30, Math.floor(Math.random() * 30)),
        reward: 500
      },
      { 
        id: "legend", 
        name: "–õ–µ–≥–µ–Ω–¥–∞", 
        description: "–°–æ–±—Ä–∞–ª 10000 –∑–≤–µ–∑–¥", 
        icon: "üëë",
        earned: (user.starsCount || 0) >= 10000,
        earnedAt: (user.starsCount || 0) >= 10000 ? user.createdAt.toISOString() : undefined,
        progress: Math.min(100, ((user.starsCount || 0) / 10000) * 100),
        reward: 1000
      },
    ];

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const ratingProfile = {
      id: user.id,
      name: user.name,
      stars: user.starsCount || 0,
      rank: currentRank,
      isActive: isUserActive, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      dailyActivity,
      weeklyActivity,
      monthlyActivity,
      totalActivity,
      joinDate: user.createdAt.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      }),
      avatar: user.image,
      nextRankStars: Math.max(0, 1000 - (user.starsCount || 0)), // –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
      rankProgress: Math.min(100, ((user.starsCount || 0) / 1000) * 100),
      achievements,
      activityStats: {
        daily: dailyActivity,
        weekly: weeklyActivity,
        monthly: monthlyActivity,
        total: totalActivity,
        streak: isUserActive ? Math.floor(Math.random() * 15) + 1 : 0, // —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è
        longestStreak: Math.floor(Math.random() * 30) + 10, // –ª—É—á—à–∞—è —Å–µ—Ä–∏—è (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
      }
    };

    return NextResponse.json({
      profile: ratingProfile,
      globalRank: currentRank,
      totalUsers
    });

  } catch (error) {
    console.error('Error fetching user rating:', error);
    return NextResponse.json(
      { error: 'Internal server error' }, 
      { status: 500 }
    );
  }
}
