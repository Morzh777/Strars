
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  
  // Основная регистрация (email/пароль)
  email         String   @unique
  emailVerified DateTime?
  name          String
  image         String?  // Аватар пользователя
  password      String   // хэш пароля
  
  // Telegram данные (опционально, для привязки)
  telegramId   String?  @unique // Telegram user ID (если привязан)
  telegramData Json?    // Дополнительные данные из Telegram (firstName, lastName, username, photoUrl, etc.)
  
  // STARS профиль данные
  description  String?  @default("Участник сообщества STARS")
  tags         String?  @default("#STARS #Участник ⭐")
  starsCount   Int?     @default(0)
  maxStars     Int?     @default(5000)
  globalRank   Int?
  
  // Служебные поля
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
