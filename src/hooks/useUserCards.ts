import { UserCard } from "@/types/userCard";
import prisma from "@/utils/prisma";

// –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const mockUserCards: UserCard[] = [
  {
    name: "–ù–∞—Ç–∞—à–∞ –†–∞—á–µ–≤–∞",
    username: "natasha_racheva",
    avatar: "https://heroui.com/avatars/avatar-1.png",
    description: "–ì–ª–∞–≤–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ü–ò–ö —Ä–µ–Ω–æ–≤–∞—Ü–∏—è. –£–ª—É—á—à–∞—é –≥–æ—Ä–æ–¥—Å–∫—É—é —Å—Ä–µ–¥—É! üèóÔ∏è",
    tags: "#–ü–ò–ö #–†–µ–Ω–æ–≤–∞—Ü–∏—è #–ò–Ω–∂–µ–Ω–µ—Ä ‚≠ê",
    starsCount: 1500,
    maxStars: 5000,
    globalRank: 12,
  },
  {
    name: "–ê–ª–µ–∫—Å–µ–π –ú–æ—Ä–æ–∑–æ–≤",
    username: "alex_morozov",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e29026024d",
    description: "Senior Frontend Developer –≤ –Ø–Ω–¥–µ–∫—Å–µ. –°–æ–∑–¥–∞—é –∫—Ä—É—Ç—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã! üíª",
    tags: "#Frontend #React #TypeScript ‚ö°",
    starsCount: 2800,
    maxStars: 5000,
    globalRank: 5,
  },
  {
    name: "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
    username: "maria_petrova",
    avatar: "https://heroui.com/avatars/avatar-3.png",
    description: "UX/UI Designer –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ. –î–µ–ª–∞—é –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–æ–±–Ω—ã–º–∏ –∏ –∫—Ä–∞—Å–∏–≤—ã–º–∏! üé®",
    tags: "#Design #UX #Figma üéØ",
    starsCount: 2200,
    maxStars: 5000,
    globalRank: 8,
  },
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
export const getAllUserCards = async (): Promise<UserCard[]> => {
  if (process.env.NODE_ENV === "development") {
    return mockUserCards;
  }

  try {
    const users = await prisma.user.findMany({
      where: {
        isActive: true,
      },
      select: {
        name: true,
        email: true,
        image: true,
        description: true,
        tags: true,
        starsCount: true,
        maxStars: true,
        globalRank: true,
      },
    });

    // Transform User data to UserCard format
    const cards: UserCard[] = users.map(user => ({
      name: user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      username: user.email?.split('@')[0] || 'user',
      avatar: user.image || `https://ui-avatars.com/api/?name=${encodeURIComponent(user.name || 'User')}&background=3b82f6&color=fff`,
      description: user.description || '–£—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ STARS',
      tags: user.tags || '#STARS #–£—á–∞—Å—Ç–Ω–∏–∫ ‚≠ê',
      starsCount: user.starsCount || 0,
      maxStars: user.maxStars || 5000,
      globalRank: user.globalRank || 0,
    }));

    return cards;
  } catch (error) {
    console.error('Error fetching user cards:', error);
    return mockUserCards;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞)
export const getLoginUserCards = async (): Promise<UserCard[]> => {
  if (process.env.NODE_ENV === "development") {
    return mockUserCards;
  }

  try {
    const users = await prisma.user.findMany({ 
      take: 3, 
      orderBy: { createdAt: 'desc' }, 
      select: { 
        name: true, 
        email: true, 
        image: true, 
        description: true, 
        tags: true, 
        starsCount: true, 
        maxStars: true, 
        globalRank: true 
      } 
    });

    const cards: UserCard[] = users.map((user, index) => ({
      name: user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      username: user.email?.split('@')[0] || 'user',
      avatar: user.image || `https://ui-avatars.com/api/?name=${encodeURIComponent(user.name || 'User')}&background=3b82f6&color=fff`,
      description: user.description || "–£—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ STARS",
      tags: user.tags || "#STARS #–£—á–∞—Å—Ç–Ω–∏–∫ ‚≠ê",
      starsCount: user.starsCount || Math.floor(Math.random() * 3000) + 1000,
      maxStars: user.maxStars || 5000,
      globalRank: user.globalRank || index + 1,
    }));

    return cards;
  } catch (error) {
    console.error('Error fetching login user cards:', error);
    return mockUserCards;
  }
};
